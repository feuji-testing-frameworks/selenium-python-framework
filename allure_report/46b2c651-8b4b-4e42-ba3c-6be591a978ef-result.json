{"name": "test_products_add_to_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.ui_testcases.test_ui.TestUiDemoBlaze object at 0x000002786B14A2D0>\nui_data = {'card': '123456567', 'city': 'hyderabad', 'country': 'india', 'email': 'shirishademo@gmail.com', ...}\n\n    def test_products_add_to_cart(self, ui_data):\n        self.login_page= DemoBlazeLoginPage(self.driver)\n>       self.login_page.login_demo_blaze(ui_data['email'],ui_data['password'])\n\ntests\\ui_testcases\\test_ui.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\ui_pages\\loginpage.py:41: in login_demo_blaze\n    self.webElement_input(self.username_field, username)\nactions\\ui_actions.py:16: in webElement_input\n    WebDriverWait(self.driver,5).until(EC.visibility_of_element_located(locator)).send_keys(text);\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"75a3d8a0fb73c24d670f81f59de1d099\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002786B10BC40>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "stdout", "source": "8dc82a62-217c-4333-b1bb-9315509197ce-attachment.txt", "type": "text/plain"}], "start": 1716205268964, "stop": 1716205274253, "uuid": "9a252ef0-01c9-4088-b133-3e6a44ff4585", "historyId": "99d9e5c54942251198035f5c69a062bc", "testCaseId": "99d9e5c54942251198035f5c69a062bc", "fullName": "tests.ui_testcases.test_ui.TestUiDemoBlaze#test_products_add_to_cart", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser_setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "tests.ui_testcases"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestUiDemoBlaze"}, {"name": "host", "value": "FEUJI-V011D"}, {"name": "thread", "value": "15660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui_testcases.test_ui"}]}