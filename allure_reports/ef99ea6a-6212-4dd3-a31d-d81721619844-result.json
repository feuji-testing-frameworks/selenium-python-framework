{"name": "test_invalid_credential_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (1008, 37). Other element would receive the click: <div class=\"modal fade show\" id=\"logInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"logInModalLabel\" style=\"display: block;\">...</div>\n  (Session info: chrome=124.0.6367.208)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6A55C1522+60802]\n\t(No symbol) [0x00007FF6A553AC22]\n\t(No symbol) [0x00007FF6A53F7CE4]\n\t(No symbol) [0x00007FF6A544E877]\n\t(No symbol) [0x00007FF6A544C344]\n\t(No symbol) [0x00007FF6A544980A]\n\t(No symbol) [0x00007FF6A54489E2]\n\t(No symbol) [0x00007FF6A543AE8B]\n\t(No symbol) [0x00007FF6A546AB7A]\n\t(No symbol) [0x00007FF6A543A7C6]\n\t(No symbol) [0x00007FF6A546AD90]\n\t(No symbol) [0x00007FF6A548A224]\n\t(No symbol) [0x00007FF6A546A923]\n\t(No symbol) [0x00007FF6A5438FEC]\n\t(No symbol) [0x00007FF6A5439C21]\n\tGetHandleVerifier [0x00007FF6A58C41BD+3217949]\n\tGetHandleVerifier [0x00007FF6A5906157+3488183]\n\tGetHandleVerifier [0x00007FF6A58FF0DF+3459391]\n\tGetHandleVerifier [0x00007FF6A567B8E6+823622]\n\t(No symbol) [0x00007FF6A5545FBF]\n\t(No symbol) [0x00007FF6A5540EE4]\n\t(No symbol) [0x00007FF6A5541072]\n\t(No symbol) [0x00007FF6A55318C4]\n\tBaseThreadInitThunk [0x00007FFD83E77344+20]\n\tRtlUserThreadStart [0x00007FFD84E026B1+33]", "trace": "self = <tests.ui_testcases.test_ui.TestUiDemoBlaze object at 0x0000016DB7CD47D0>\nui_data = {'card': '123456567', 'city': 'hyderabad', 'country': 'india', 'email': 'shirishademo@gmail.com', ...}\n\n    def test_invalid_credential_login(self,ui_data):\n        self.login_page=DemoBlazeLoginPage(self.driver)\n>       self.login_page.login_invalid_credentials(ui_data['email'], ui_data['incorrect_password'])\n\ntests\\ui_testcases\\test_ui.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\ui_pages\\loginpage.py:56: in login_invalid_credentials\n    self.webElement_click(self.menu_login)\nactions\\ui_actions.py:12: in webElement_click\n    WebDriverWait(self.driver,10).until(EC.visibility_of_element_located(locator)).click();\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016DB7A0D850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6A55318C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD83E77344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD84E026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (1008, 37). Other element would receive the click: <div class=\"modal fade show\" id=\"logInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"logInModalLabel\" style=\"display: block;\">...</div>\nE         (Session info: chrome=124.0.6367.208)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6A55C1522+60802]\nE       \t(No symbol) [0x00007FF6A553AC22]\nE       \t(No symbol) [0x00007FF6A53F7CE4]\nE       \t(No symbol) [0x00007FF6A544E877]\nE       \t(No symbol) [0x00007FF6A544C344]\nE       \t(No symbol) [0x00007FF6A544980A]\nE       \t(No symbol) [0x00007FF6A54489E2]\nE       \t(No symbol) [0x00007FF6A543AE8B]\nE       \t(No symbol) [0x00007FF6A546AB7A]\nE       \t(No symbol) [0x00007FF6A543A7C6]\nE       \t(No symbol) [0x00007FF6A546AD90]\nE       \t(No symbol) [0x00007FF6A548A224]\nE       \t(No symbol) [0x00007FF6A546A923]\nE       \t(No symbol) [0x00007FF6A5438FEC]\nE       \t(No symbol) [0x00007FF6A5439C21]\nE       \tGetHandleVerifier [0x00007FF6A58C41BD+3217949]\nE       \tGetHandleVerifier [0x00007FF6A5906157+3488183]\nE       \tGetHandleVerifier [0x00007FF6A58FF0DF+3459391]\nE       \tGetHandleVerifier [0x00007FF6A567B8E6+823622]\nE       \t(No symbol) [0x00007FF6A5545FBF]\nE       \t(No symbol) [0x00007FF6A5540EE4]\nE       \t(No symbol) [0x00007FF6A5541072]\nE       \t(No symbol) [0x00007FF6A55318C4]\nE       \tBaseThreadInitThunk [0x00007FFD83E77344+20]\nE       \tRtlUserThreadStart [0x00007FFD84E026B1+33]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "a898a185-151a-4c11-9017-885284ec151d-attachment.txt", "type": "text/plain"}], "start": 1716182730459, "stop": 1716182731533, "uuid": "1c453992-81df-4311-a0f8-dcf284d1c495", "historyId": "d3972699a264b0db90de3b3de02656a6", "testCaseId": "d3972699a264b0db90de3b3de02656a6", "fullName": "tests.ui_testcases.test_ui.TestUiDemoBlaze#test_invalid_credential_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser_setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "tests.ui_testcases"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestUiDemoBlaze"}, {"name": "host", "value": "FEUJI-V011D"}, {"name": "thread", "value": "828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui_testcases.test_ui"}]}